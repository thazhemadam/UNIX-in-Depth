shell:
- interface to talk to the OS
- historically : bourne shell(sh) - c shell(csh) - korn shell(ksh) - 
  - born again bourne shell(bash)
- command interpreter
- alias
  give another name for a command
- user defined function
  function name
  {
	// commands
  }
  call: name
  remove : unset name

How does unix execute a command?
1. alias
2. function
3. shell builtin
4. external command
	is always a file
	a) locate the file
	if the command has no / then
		use the PATH variable to locate the file
	else
		use the command as it is
	b) execute it
		check whether the file has execute permission
		if it is a loadable image(compilation and linking),
			then execute it by using loader
		else (text file)
			reads the first line
			if it is special (#! path)
				then execute the path with the file as argument to it
			else
				execute under a default shell
features:
- metacharacter
	does not affect the command
	affect the command line
	all metachar are expanded before the command is executed
	?  matches a char
	*  matches 0 or more char
	[ch1-ch2] match a char bet ch1 and ch2
	[!ch1-ch2] match anything other than ch1 and ch2

	scanf("[^\n]"...

- redirection
	cmd <file
	read from the file instead of stdin
	cmd >file
	write to the file instead of stdout
	cmd 2>file
	write to the file instead of stderr
	cmd >>file
	append to the file whatever we write to stdout
	cmd <<word
	stop input at word

commands:
	wc
	grep : group reg expr pattern
	sort
	uniq
	head
	tail
	cut
	tr : transliterator
		tr -s : squeezing
piping:
	biggest file in the directory
	
	ls -l
	ls -l | tail -n +2
 	ls -l | tail -n +2 | tr -s " " | cut -d" " -f5,9
    ls -l | tail -n +2 | tr -s " " | cut -d" " -f5,9 |sort -n
	ls -l | tail -n +2 | tr -s " " | cut -d" " -f5,9 |sort -n|tail -1

	ls -l | tail -n +2 | tr -s " " | cut -d" " -f5,9 |sort -n|tail -1|cut -d" " -f2

			











